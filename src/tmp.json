mongooseCollection: Collection {
collection: Collection { s: [Object] },
Promise: [Function: Promise],
modelName: 'ParkingSite',
_closed: false,
opts: {
autoIndex: true,
autoCreate: true,
schemaUserProvidedOptions: {},
capped: false,
Promise: undefined,
'$wasForceClosed': undefined
},
name: 'parkingsites',
collectionName: 'parkingsites',
conn: NativeConnection {
base: [Mongoose],
collections: [Object],
models: [Object],
config: {},
replica: false,
options: null,
otherDbs: [],
relatedDbs: {},
states: [Object: null prototype],
_readyState: 1,
_closeCalled: undefined,
_hasOpened: true,
plugins: [],
id: 0,
_queue: [],
_listening: false,
_connectionOptions: [Object],
_connectionString: 'mongodb+srv://pbl5:pbl5@pbl5cluster.ycd0qmt.mongodb.net/parking_web_app_db?retryWrites=true&w=majority',
client: [MongoClient],
'$initialConnection': [Promise],
db: [Db],
host: 'ac-6zfe8ez-shard-00-00.ycd0qmt.mongodb.net',
port: 27017,
name: 'parking_web_app_db'
},
queue: [],
buffer: false,
emitter: EventEmitter {
_events: [Object: null prototype] {},
_eventsCount: 0,
_maxListeners: undefined,
[Symbol(kCapture)]: false
}
},
model: Model { ParkingSite },
schema: Schema {
obj: {
name: [Object],
slug: [Object],
maxSpot: [Object],
availableSpot: [Object],
price: [Object],
description: [Object],
location: [Object]
},
paths: {
name: [SchemaString],
slug: [SchemaString],
maxSpot: [SchemaNumber],
availableSpot: [SchemaNumber],
price: [SchemaNumber],
description: [SchemaString],
'location.type': [SchemaString],
'location.coordinates': [SchemaArray],
'location.address': [SchemaString],
_id: [ObjectId],
__v: [SchemaNumber]
},
aliases: {},
subpaths: { 'location.coordinates.$': [SchemaNumber] },
virtuals: { id: [VirtualType] },
singleNestedPaths: {},
nested: { location: true },
inherits: {},
callQueue: [],
_indexes: [],
methods: {},
methodOptions: {},
statics: {},
tree: {
name: [Object],
slug: [Object],
maxSpot: [Object],
availableSpot: [Object],
price: [Object],
description: [Object],
location: [Object],
_id: [Object],
__v: [Function: Number],
id: [VirtualType]
},
query: {},
childSchemas: [],
plugins: [ [Object], [Object], [Object], [Object], [Object] ],
'$id': 2,
mapPaths: [],
s: { hooks: [Kareem] },
_userProvidedOptions: {},
options: {
typeKey: 'type',
id: true,
_id: true,
validateBeforeSave: true,
read: null,
shardKey: null,
discriminatorKey: '__t',
autoIndex: null,
minimize: true,
optimisticConcurrency: false,
versionKey: '__v',
capped: false,
bufferCommands: true,
strictQuery: false,
strict: true,
pluralization: true
},
'$globalPluginsApplied': true
},
op: 'findOneAndUpdate',
options: { new: true },
_conditions: { id: '643ffc5ab3e1bdbbdb681777' },
_fields: undefined,
_updateDoc: undefined,
_path: undefined,
_distinctDoc: undefined,
_collection: NodeCollection {
collection: Collection {
collection: [Collection],
Promise: [Function: Promise],
modelName: 'ParkingSite',
_closed: false,
opts: [Object],
name: 'parkingsites',
collectionName: 'parkingsites',
conn: [NativeConnection],
queue: [],
buffer: false,
emitter: [EventEmitter]
},
collectionName: 'parkingsites'
},
_traceFunction: undefined,
'$useProjection': true,
_update: { name: 'teds nha xe 2', maxSpot: 400 }
}
